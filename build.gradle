libraries = [
	jpa: 'javax.persistence:persistence-api:1.0',
	jta: 'javax.transaction:jta:1.1',
	c3p0: 'c3p0:c3p0:0.9.1.2',
	slf4j: 'org.slf4j:slf4j-api:1.5.10',
	log4j: 'log4j:log4j:1.2.14',
	junit: 'junit:junit:4.7',
	servlet_api: 'javax.servlet:servlet-api:2.4',
	hibernate: 'org.hibernate:hibernate-core:3.3.2.GA',
	hibernate_ehcache: 'org.hibernate:hibernate-ehcache:3.3.2.GA',
	hibernate_annotations: 'org.hibernate:hibernate-annotations:3.4.0.GA',
	javassist: 'javassist:javassist:3.8.0.GA',
	cglib: 'cglib:cglib-nodep:2.2',
	ehcache: 'net.sf.ehcache:ehcache-core:1.7.2',
	freemarker: 'org.freemarker:freemarker:2.3.16',
	javax_mail: 'javax.mail:mail:1.4.1',
	json_lib: 'net.sf.json-lib:json-lib:2.3:jdk15',
	quartz: 'org.opensymphony.quartz:quartz:1.6.1',
	dom4j: 'dom4j:dom4j:1.6.1',
	commons_fileupload: 'commons-fileupload:commons-fileupload:1.2.1',
	commons_httpclient: 'commons-httpclient:commons-httpclient:3.1',
	xstream: 'com.thoughtworks.xstream:xstream:1.3.1',
	dwr: 'org.directwebremoting:dwr:3.0.0.M1.116',
	yuicompressor: 'com.yahoo.platform.yui:yuicompressor:2.4.2',
	texhyphj: 'net.davidashen:texhyphj:1.1.0',
	htmlparser: 'org.htmlparser:htmlparser:1.6',
	apache_poi: 'org.apache.poi:poi:3.5-FINAL'
] + modules('lucene', 'org.apache.lucene:lucene-$name:2.4.1', 
		  'core', 'highlighter', 'analyzers', 'snowball') + 
	modules('spring', 'org.springframework:spring-$name:3.0.0.RELEASE',
		  'core', 'expression', 'beans', 'aop', 'context', 'context-support',
		  'tx', 'jdbc', 'orm', 'oxm', 'web', 'webmvc', 'test');

excludes = [
	[group: 'javax.jms'],
	[group: 'com.sun.jmx'],
	[group: 'com.sun.jdmk']
]

apply id: 'java'
apply id: 'eclipse'
dependsOnChildren()

allprojects {
	group = 'org.riotfamily'
	version = '9.1.0.cygni.7'
	repositories {
		mavenRepo urls: 'http://repository.riotfamily.org/cache'
		mavenRepo urls: 'http://repository.riotfamily.org/external'
	}
	excludes.each{
		configurations.all*.exclude it
	}
	
	task release
}

subprojects {
	
	if (!isMetaProject(project)) {
		apply id: 'java'
		apply id: 'maven'
		
		release.dependsOn(uploadArchives)
		
		sourceCompatibility = 1.5
		targetCompatibility = 1.5
		
		configurations.compile.transitive = true
		configurations.testCompile.transitive = true
				
		// Add a 'provided' configuration
		configurations {
			provided {
				description = 'Dependencies provided by the JDK or a container'
				transitive = false
			}
		}
		
		// Include 'provided' dependencies when compiling tests
		configurations.testCompile.extendsFrom(configurations.provided)
		
		sourceSets {
			main {
				// No separate 'resources' dir - we keep everything under src 
				resources.srcDirs = java.srcDirs = ['src']
				
				// Add the 'provided' configuration to the classpath
				compileClasspath = compileClasspath + configurations.provided
			}
			test {
				resources.srcDirs = java.srcDirs = ['test']
			}
		}
		
		// Add META-INF directory
        metaInf << fileTree('META-INF')

        // Add project-name and version to the manifest 
        manifest.mainAttributes(
        		'Implementation-Title': project.name, 
				'Implementation-Version': project.version,
				'Implementation-Vendor': 'riotfamily.org'
		)

		// Create source artifacts for Java projects
		if (isJavaProject(project)) {
			dependencies {
				testCompile libs(['junit', 'spring_test'])
			}
			task sourceJar(type: Jar) {
				from sourceSets.main.allSource 
				classifier = 'sources'
			}
			artifacts {
				archives sourceJar
			}
		}
		
		if (rootProject.hasProperty('artifactoryUser') && rootProject.hasProperty('artifactoryPass')) {
	        uploadArchives {
				repositories {
					mavenDeployer {
						//repository(url: "file://$System.env.HOME/.m2/repository")
						repository(url: "http://repository.riotfamily.org/releases") {
							authentication(userName: artifactoryUser, password: artifactoryPass)
						}
						snapshotRepository(url: "http://repository.riotfamily.org/snapshots") {
							authentication(userName: artifactoryUser, password: artifactoryPass)
						}
					}
				}
			}
		}
	}
}

// The root project uses the Java plugin (allthough it's actually a meta 
// project) in order to generate a merged .classpath file for Eclipse.
// We disable the 'jar' and 'classes' targets so that no 'build' folder 
// gets created.

classes.enabled = false
jar.enabled = false

gradle.taskGraph.whenReady {taskGraph ->
	if (taskGraph.hasTask(':eclipse')) {
		javaProjects().each{
			// Collect source folders
			project.sourceSets.main.java.srcDirs(it.sourceSets*.java.srcDirs.flatten())
			
			// Collect all external dependencies from the testRuntime configuration
			it.configurations.findByName('testRuntime')?.getAllDependencies(ExternalDependency.class).each{
				project.configurations.compile.addDependency(it)
			}
		}
	}
	if (!taskGraph.hasTask(':release')) {
		allprojects {
			version += "-SNAPSHOT"
		}
	}
}

/**
 * Creates the gradlew wrapper scripts
 */
task wrapper(type: Wrapper) {
	gradleVersion = '0.9-20100126192055+0100'
	urlRoot = 'http://riotfamily.org/downloads/gradle'
	jarPath = 'wrapper'
}

// ---------------------------------------------------------------------------
// Utility methods
//----------------------------------------------------------------------------

def isMetaProject(Project project) {
	project?.name == 'jslibs'
}

def isJavaScriptProject(Project project) {
	isMetaProject(project.parent)
}

def isJavaProject(Project project) {
	!isMetaProject(project) && !isJavaScriptProject(project)
}

def javaProjects() {
	subprojects.findAll{ isJavaProject(it) }
}


def modules(String key, String pattern, String... names) {
	libs = [:]
	template = new groovy.text.GStringTemplateEngine().createTemplate(pattern)
	names.each{ name ->
		libs[key + '_' + name.replace('-', '_')] = template.make([name: name]).toString()
	}
	libs
}

def lib(String name) {
	dep = libraries[name]
	assert dep != null, "No such library: ${name}"
	dep
}

def libs(Collection names) {
	names.collect{ lib(it.toString()) }
}
